\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pretest.info
@settitle PreTest CookBook 0.1
@c %**end of header

@setchapternewpage odd

@ifinfo
PreTest CookBook

Copyright @copyright{} 2014 Assaf Gordon (agn@@gnu.org).
@end ifinfo

@titlepage
@sp 10
@comment The title is printed in a large font.
@center @titlefont{PreTest CookBook}

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2014 Assaf Gordon (agn@@gnu.org)

Content on this manual is licensed under a
Creative Commons Attribution-Share-Alike 4.0 License
(@url{http://creativecommons.org/licenses/by-sa/4.0/}),

or, at your choice,

under the GNU Free Documentation License 1.3,
with no invariant sections, with no front-cover texts,
and with no back-cover texts.
A copy of the license is included in the file @file{COPYING.DOC}.
@end titlepage

@node    Top,       Introduction, (dir),    (dir)
@comment node-name, next,          previous, up

@menu
* Introduction::         What this Pretest is all aobut
* Quick Start::          Try it out now
* VM Configuration::     Using PreTest images
* Usage::                Effective use of these VMs
* Build Recipes::        How each VM was built
* Downloads::            Available downloads of pre-built VMs
* Future Improvements::  The TODO List
* Concept Index::        The Index
@end menu

@contents

@c ***********************************************************
@c Introduction
@c ***********************************************************
@node    Introduction, Quick Start, Top,      Top
@comment node-name,     next,          previous, up
@chapter Introduction
@cindex Introduction

The goal of @emph{pretest} is to provide virtual-machine images of
Free-Software POSIX-compliant operating systems, for portability testing of
GNU software (or any other @command{autotools}-based software).

The virtual-machine images are pre-configured to have similar settings and
similar tools installed.

This version of @emph{pretest} provides images for quick and easy manual
testing. Future versions will add automated testing facilities.

For latest up-to-date information, visit PreTest website at:
@url{http://www.nongnu.org/pretest/}.

For suggetions, comments, questions, but reports and patches, send an email
to @url{pretest-users@@nongnu.org}

@c ***********************************************************
@c Quick Start
@c ***********************************************************
@node    Quick Start, VM Configuration, Introduction,      Top

@comment node-name,     next,          previous, up
@chapter Quick Start
@cindex Quick Start

Download one of the images in the @ref{Downloads} section, and decompress
the image
@example
wget http://files.housegordon.org/pretest/v0.1/debian76.build-ready.qcow2.xz
unxz debian76.build-ready.qcow2.xz
@end example

Run the image:
@example:
kvm -nographic -m 384 \
    -net user -net nic,model=virtio \
    -drive if=virtio,media=disk,index=0,file=debian76.build-ready.qcow2
@end example

User name is @var{miles}, password is @var{12345}.

While the virtual machine is running, type @kbd{CTRL-A, C} to switch
to QEMU Monitor mode (@url{http://en.wikibooks.org/wiki/QEMU/Monitor}).
Type @kbd{CTRL-A, c} to return to the virtual machine's console.
For details about KVM parameters, see @ref{Simple KVM usage}.

A helper script (@file{pretest-run.sh}) provides more KVM/QEMU options, see
@ref{Pretest-run script}.

@c ***********************************************************
@c Getting Started
@c ***********************************************************
@node    VM Configuration, Usage, Quick Start,      Top
@comment node-name,     next,          previous, up
@chapter VM Configuration
@cindex VM Configuration

This version of @emph{pretest} provides two types of pre-built virtual-macihne
images:
@table @asis
@item Clean-Install
Minimal configuration, after a clean install from a CD ISO image, using
(mostly) default settings for the installation process.

@item Build-Ready
Based on the 'clean-install' images, with additional packages installed to
enable compilation of GNU software (or other @command{autotool}-based pacakges).
@end table

@menu
* Clean-Install VMs::        Minimally configurated VMs
* Build-Ready VMs::          GNU-autotools configured VMs
* Security Considerations::  Security Considerations
@end menu

@node    Clean-Install VMs, Build-Ready VMs, VM Configuration, VM Configuration
@section Clean-Install VMs
@cindex  Clean-Install VMs

@emph{Pretest}'s virtual machine in 'clean-install' state are configured with
the following items:
@itemize
@item uses @emph{virtio} disk interface, with QEMU's @option{-drive if=virtio} (except HURD)
@item uses @emph{virtio} network interface, with QEMU's @option{-net nic,model=virtio} (except HURD)
@item Network interface configured with DHCP, works with QEMU's @option{-net user}.
@item VM uses serial console (for qemu's @option{-nographic} or @option{-serial stdio})
@item Root password is @var{12345} (or empty on MINIX,HURD)
@item Non-Root user is @var{miles} password @var{12345}
@item user @var{miles} can @command{sudo} without a password (except MINIX)
@end itemize

The minimal @command{kvm} usage would be (replace @file{XXXX.qcow2} with the
download image file, after decompressing with with @command{unxz}):
@example
kvm -nographic -m 384 \
    -drive if=virtio,media=disk,index=0,file=XXXX.qcow2
@end example

Or use the supplied @file{pretest-run.sh} for more options:
@example
pretest-run.sh XXXX.qcow2
@end example

see @ref{Clean-Install VM downloads} for list of available VM images.

@node    Build-Ready VMs, Build Recipes, Clean-Install VMs, VM Configuration
@section Build-Ready VMs
@cindex  Build-Ready VMs

@emph{Pretest}'s virtual machine in 'build-ready' state are configured with
the following items (in addition to all '@ref{Clean-Install VMs}' settings):
@itemize
@item The default compiler for the OS (e.g. @command{gcc} or @command{clang})
@item @command{make}, and optionally @command{gmake} (if @command{make} is not GNU make)
@item autotools programs (@command{automake}, @command{autoconf}, @command{authoreconf})
@item texinfo (@command{makeinfo})
@item @command{pkg-config}, @command{gperf}
@item @command{git}, @command{rync}, @command{wget}, @command{xz}

@item @emph{NOTE}: The version of the above programs vary widely between OSes.
The installed versions used are the defaults available for the OS.

@item All OSes can compile @command{GNU Hello}:
@example
cd /tmp
wget http://ftp.gnu.org/gnu/hello/hello-2.9.tar.gz
tar xzf hello-2.9.tar.gz
cd hello-2.9
./configure && make && make check
@end example

@item All OSes can start to compile @command{GNU Coreutils}:
@example
cd /tmp
wget http://ftp.gnu.org/gnu/coreutils/coreutils-8.23.tar.xz
xzcat coreutils-8.23.tar.xz | tar -xf -
cd coreutils-8.23
./configure && make && make check
@end example
NOTE: On some OSes (e.g. MINIX, NetBSD6.1.4) compilation fails half-way
through.

@item Some (but not all) OSes can build GNU programs from GIT:
@example
cd /tmp
git clone git://git.sv.gnu.org/datamash
cd datamash
./bootstrap && ./configure && make
@end example
NOTE: Building from git (using gnuli's @file{bootstrap}) usually requires
a recent version of autotools programs which are not always available.

@end itemize

The typical @command{kvm} usage would be (replace @file{XXXX.qcow2} with the
downloaded image file, after decompressing with with @command{unxz}):
@example
kvm -nographic -m 384 \
    -drive if=virtio,media=disk,index=0,file=XXXX.qcow2
@end example

Or use the supplied @file{pretest-run.sh} for more options:
@example
pretest-run.sh XXXX.qcow2
@end example

see @ref{Build-Ready VM downloads} for list of available VM images.

@node    Security Considerations, Usage, Build-Ready VMs, VM Configuration
@section Security Considerations
@cindex  Security Considerations

The pre-built VM images are configured with very little security in mind.

@itemize

@item The root password is known, weak and fixed (it is always `12345`).

@item The non-root user 'miies' has knonw, weak password `12345` and can run
@command{sudo} commands without requiring a password.

@item The images boot using a known random-seed state (which is to say: not
random at all)

@item The images are @emph{not} regularly updated with security updates, and
certainly contained out-dated software with known vulnerabilities.

@end itemize

These pre-built images must not be used for any production or public servers,
or as a basis for such servers.

@c ***********************************************************
@c Usage
@c ***********************************************************
@node    Usage, Build Recipes, VM Configuration, Top
@chapter Usage
@cindex Usage

@menu
* Simple KVM usage::                Using images directly with KVM
* Pretest-run script::              Using images with pretest-run.sh script
* Sending data from Guest to Host:: Using serial port to export data
* LibVirt usage::                   Using images with libVirt
* Debian Compilers Pack Usage::     Testing multiple compilers
@end menu

@node Simple KVM usage, Pretest-run script, Usage, Usage
@section Simple KVM Usage
@cindex Simple KVM Usage

All images are pre-configured to be used with QEMU/KVM with the default parameters
and with @emph{virtio} drivers (except GNU Hurd which requires @emph{IDE} drivers).

A typical usage is:
@example
kvm -nographic -m 384 \
    -net user -net nic,model=virtio \
    -drive if=virtio,media=disk,index=0,file=debian76.build-ready.qcow2
@end example

All pre-configured VMs support serial console (QEMU's @option{-serial mon:stdio}).

All pre-configured VMs support graphic monitors (QEMU's @option{-vga cirrus} or
related option).

@emph{NOTE}: Some VMs have special requirement, see each VM's build instructions,
or the @file{pretest-run.sh} script for OS-specific hacks.

@node Pretest-run script, Sending data from Guest to Host, Simple KVM usage, Usage
@section Pretest-run script
@cindex pretest-run script
@cindex pretest-run.sh

The included script (@file{pretest-run.sh}) provides a common, simple
interface for starting all pre-built images with the most common settings.

A typical usage is:

@example
# Download a pre-built image
wget http://files.housegordon.org/pretest/v0.1/debian76.build-ready.qcow2.xz
unxz debian76.build-ready.qcow2.xz

# Start it, with serial console
pretest-run.sh debian76.build-ready.qcow2
@end example

The @file{pretest-run.sh} script will use the appropriate KVM/QEMU parameters
for each VM/OS type.

By default the @file{pretest-run.sh} uses serial console, no graphic card,
user-mode networking with DHCP and virtio drivers, and forwards the guest
VM's port 22 to the host's 2222 TCP port.

Additionally, the @file{pretest-run.sh} accepts the following options:

@table @option
@item -h
Show help screen

@item -m @var{N}
Use N MBs of ram (default is 384MB)

@item -p @var{N}
Forward guest VM's port 22 (SSH) to host port N (default 2222).

To connect to the guest, use the following on the host:
@example
ssh -p $ssh_port miles@@localhost
@end example

@item -S
Disable QEMU's @option{-snapshot} mode, write changes to QCOW2 image file.
(default: use @option{-snapshot})

NOTE: Even with @option{-snapshot} mode on, changes can be written to the VM
disk image using the QEMU Monitor (press @kbd{CTRL-A,c}, thent type
@command{commit all}).

@item -r
Connect the guest VM's 2nd serial port to a file on the host.

To send data from guest VM to host, run (inside the guest VM):
@example
echo hello > /dev/ttyS1 (on GNU/Linux)
echo hello > /dev/com1  (on Hurd)
echo hello > /dev/ttyu1 (on FreeBSD)
echo hello > /dev/tty01 (on Dilos, MINIX, OpenBSD, NetBSD)
@end example

The file will be named @file{FILE.serial} (based on input QCOW2 filename).

@item -C
Use CURSES VGA text interface (QEMU's @option{-curses} option).

Default is no VGA adapter, only serial consoele.

@item -D
Use VGA Display mode (QEMU's @option{-vga cirrus}).

Default is no VGA adapter, only serial consoele.

@item -z
Fork QMEU process in the background (QEMU's @option{-daemonize}).

Default is to stay in the foreground. Implies @option{-P}.

@item -P
Write PID file (QEMU's @option{-pidfile}).

The file will be named @file{FILE.pid} (based on input QCOW2 filename).
@end table

@node Sending data from Guest to Host, LibVirt usage, Pretest-run script, Usage
@section Sending data from Guest to Host
@cindex Sending data from Guest to Host
@cindex Serial file

Using a serial file, exporting data from the guest VMs to the host is easy.

Start a guest VM with the @option{-r} option of @command{pretest-run.sh}, like so:

@example
pretest-run.sh -r minixR330.qcow2
@end example

The guest VM's @emph{2nd} serial port will be connected to a file named
@file{minixR330.serial} on the host (the first serial port is connected to the
console by default).

Inside the guest VM, use @command{uuencode} (or @command{base64}, or other
similar commands) to convert a binary file to text, then send it to the
serial port:

@example
# On GNU/Linux VMs:
uuencode -m /path/to/file REMOTENAME > /dev/ttyS1

# On MINIX, NetBSD, OpenBSD, etc VMs:
cat FILE | uuencode -m /path/to/file REMOTENAME > /dev/tty01
@end example

It is also recommended to use a checksum program (e.g. @command{sum}) to verify
the integrity of a binary file after the transfer.

On the host, decode the file like so:

@example
cat minixR330.serial | tr -d '\r' | uudecode
@end example

and a new file @file{REMOTENAME} will be created on the host. Compare the
@command{sum} of the generated file to the guest's sum to verify integrity.

@emph{NOTE:} The @file{FILE.serial} is truncated every invocation of the
@command{pretest-run.sh} script.

@node LibVirt usage, Debian Compilers Pack Usage, Pretest-run script, Usage
@section LibVirt usage
@cindex libvirt

LibVirt (@url{http://libvirt.org/}) support is planned (e.g. providing a
libVirt-compatible XML configuration files for each VM image), but is not
yet available. Patches are welcomed.

@node Debian Compilers Pack Usage, Build Recipes, Usage, Usage
@section Debian Compilers Pack Usage
@cindex Cross Compilers, usage
@cindex Compilers Pack

The @ref{Debian Compilers Pack} virtual machine image is pre-configured with
multile compilers and cross compilers:
@itemize
@item gcc (native)
@item clang (native)
@item tcc - Tiny C compiler (a C99-compatible compiler, native)
@item arm (gcc cross compiler)
@item powerpc (gcc cross compiler)
@item mips (gcc cross compiler)
@item MinGW 32bit (gcc cross compiler)
@item MinGW 64bit (gcc cross compiler)
@end itemize

Additionally, the virtual machine is configured with @code{binfmt} and QEMU's
static emulation to run cross-compiled binaries.

See @ref{Build-Ready VM downloads} for download instructions, and
@ref{Debian Compilers Pack} for details about how this virtual machine was
installed.

When using this virtual machine, an @code{autotools}-based project can be
compiled like so:
@example
wget http://ftp.gnu.org/gnu/hello/hello-2.9.tar.gz
tar -xf hello-2.9.tar.gz
cd hello-2.9

# Cross-Compile for ARM
./configure --host=arm-linux-gnueabi

# Cross-Compile for PowerPC
./configure --host=powerpc-linux-gnu

# Cross-Compile for MIPS
./configure --host=mips-linux-gnu

# Cross-Compile for Windows 32Bit
./configure --host=i686-w64-mingw32

# Cross-Compile for Windows 64-bit
./configure --host=x86_64-w64-mingw32

# Native Compile using CLANG (instead of the default GCC)
./configure CC=clang

# Native compile using TCC (TCC is C99-compliant compiler)
./configure CC=tcc

# The continue to build the project
make
@end example

When compiling for ARM/PowerPC/MIPS, the resulting non-native binary
can be executed on the host using QEMU+binfmt:
@example
$ ./configure --host=arm-linux-gnueabi
<...>
$ make
<...>
$ file ./src/hello
./src/hello: ELF 32-bit LSB executable, ARM, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, BuildID[sha1]=0xcdb472c330662c870db31789e13de057f22c4f52, not stripped

# The ARM binary can be executed:
$ ./src/hello
Hello, world!

# And autotools tests can be used:
$ make check
<...>
@end example

@c **********************************************************o
@c Build Recipces
@c ***********************************************************
@node    Build Recipes, Future Improvements, Usage, Top
@comment node-name,     next,          previous, up
@chapter Build Recipes
@cindex Build Recipes

@menu
* Build Recipe Introduction::   Information relevant to all build recipes
* GNU Hurd::                    Preparing GNU Hurd VM
* OpenBSD 5.5::                 Installing OpenBSD 5.5 VM
* NetBSD 6.1.4::                Installing NetBSD 6.1.4 VM
* FreeBSD 10::                  Installing FreeBSD 10 VM
* FreeBSD 9.3::                 Installing FreeBSD 9.3 VM
* Minix R3.3.0::                Installing Minix R3.3.0 VM
* Debian 7.6::                  Installing Debian 7.6 VM
* Debian Compilers Pack::       Installing many compilers (and cross-compilers) VM
* gNewSense 3.1::               Installing gNewSense 3.1 VM
* CentOS 7.0::                  Installing CentOS 7.0 VM
* CentOS 6.5::                  Installing CentOS 6.5 VM
* Fedora 20::                   Installing Fedora 20 VM
* Ubuntu 14.04.1::              Installing Ubuntu 14.04.1 VM
* Trisquel 6.0.1::              Installing Trisquel 6.0.1 VM
* OpenSUSE 13.1::               Installing OpenSUSE 13.1 VM
* DilOS 1.3.7::                 Installing DilOS 1.3.7 VM
@end menu

@c ***********************************************************
@c Build Recipe Introduction
@c ***********************************************************
@node Build Recipe Introduction, GNU Hurd, Build Recipes, Build Recipes
@section Build Recipe Introduction
@cindex Introduction, build recipe
@cindex build recipe, introduction

Build recipes follow a common structure:

@table @asis
@item Information
General Information (such as Home page and Download page) for this operating
system.

@item Download
Where to find the CD ISO image file used for this VM installation.

Scripts to download the ISO and run QEMU/KVM for the initial installation
are provided in the @file{build_scripts} directory.

@item QMEU/KVM Notes ('build_scripts')
Some OSes need special QEMU/KVM flags for initial installation.
This section will list any critical issues.

Scripts to download the ISO and run QEMU/KVM for the initial installation
are provided in the @file{build_scripts} directory.

@item Installation from CD/ISO
Notes regarding special setup/installation options required during
the setup process.
In the future, this step should be automated, see @xref{Future Improvements}.

@item First boot ('clean-install')
After the installation from the ISO file is complete, the system should be
rebooted (still running under the same QEMU/KVM process).
The build scripts are configured to boot from the installed drive.
This section lists commands to be run at this stage, to prepare the image
to be run with the @command{pretest-run.sh} scripts with similar settings
(e.g. same password for user @var{root} and non-root user @var{miles},
@command{sudo} without password for user @var{miles},
boot using serial console, etc.).

When this step is complete, QEMU/KVM should be stopped, and the QCOW2
file are tagged as 'clean-install'. Such pre-built images are
available for download, see @xref{Downloads}.

@item Setup build tools ('build-ready')
This section lists commands required to install build tools (e.g.
@command{autoconf}, @command{git}, @command{make}, etc.).
The VMs are started using @command{pretest-run.sh}, and after installation is
complete, the QCOW2 files are tagged as 'build-ready'. Such pre-build images
are available for download, see @xref{Downloads}.

@end table



@c ***********************************************************
@c GNU Hurd
@c ***********************************************************
@node GNU Hurd, OpenBSD 5.5, Build Recipe Introduction, Build Recipes
@section GNU Hurd
@cindex GNU Hurd, build recipe
@cindex build recipe, GNU Hurd

GNU Hurd home page: @url{http://www.gnu.org/software/hurd/}

GNU Hurd is the OS kernel, and several different user-space OSes are availble.
The instructions below use GNU Hurd/Debian,
see @url{http://www.debian.org/ports/hurd/hurd-install}.

@cindex GNU Hurd, download
@unnumberedsubsec Download
The VM setup for GNU Hurd starts with a pre-build Hurd/Debian system (not a
CDROM ISO image file). The pre-build image was prepared by Debian User
@code{~sthibault}, see @url{https://people.debian.org/~sthibault/hurd-i386/README}.

The raw disk image used was
@url{https://people.debian.org/~sthibault/hurd-i386/debian-hurd-20140529.img.gz}

After download and uncompressing the image, @command{qemu-img} was used to
convert the image from @sc{RAW} format to @sc{qcow2} format.

Download and initial QEMU invocation commands are available in the
@file{build_scripts/build_hurd-20140529.sh} file, see @xref{Downloads}.

@cindex GNU Hurd, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes
GNU Hurd can not use @option{virtio} drivers for disk or networking.
The installation script (@file{build_scripts/build_hurd-20140529.sh}) and the
run script (@file{pretest-run.sh}) use @sc{IDE} for disk emulation,
and @sc{rtl8139} for network emulation.

See @url{http://www.gnu.org/software/hurd/hurd/running/qemu.html}

@cindex GNU Hurd, CD Installation
@unnumberedsubsec CD Installation/Setup

There are no installation instructions, the GNU Hurd/Debian image is already
installed.

@cindex GNU Hurd, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (no password).

Add user @var{miles}:
@example
adduser miles
passwd miles      # enter '12345' for the password
@end example

Add user @var{miles} to @var{sudo} group:
@example
adduser miles sudo
@end example

Enable @command{sudo} without password for @var{sudo} group members:
@example
sed -i -e '/^%sudo/s/ALL$/NOPASSWD: ALL/' /etc/sudoers
@end example

Configure booting using serial console
(see @url{https://www.gnu.org/software/hurd/faq/serial_console.html}):
@example
echo 'GRUB_CMDLINE_GNUMACH="console=com0"' >> /etc/default/grub
update-grub
@end example

Stop GNU-Hurd VM:
@example
/sbin/halt
@end example

Note: since the downloaded image is already installed, there is no
`clean-install` version of of GNU Hurd VM.

Tag the @file{hurd.qcow2} as `build-ready`. A pre-build image is available for
download, see @xref{Downloads}.


@c ***********************************************************
@c Open BSD 5.5
@c ***********************************************************
@node OpenBSD 5.5, NetBSD 6.1.4, GNU Hurd, Build Recipes
@section OpenBSD 5.5
@cindex OpenBSD 5.5, build recipe
@cindex build recipe, OpenBSD 5.5

OpenBSD 5.5 Homepage: @url{http://www.openbsd.org/55.html}.

@cindex OpenBSD 5.5, download
@unnumberedsubsec Download
ISO : @url{ftp://mirrors.nycbug.org/pub/OpenBSD/5.5/amd64/install55.iso}

@cindex OpenBSD 5.5, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes
OpenBSD 5.5 installation works well with default QEMU/KVM settings and
@option{virtio} drivers.
See the installation script (@file{build_scripts/build_openbsd55.sh}) for
download and QMEU/KVM commands.

@cindex OpenBSD 5.5, CD Installation
@unnumberedsubsec CD Installation/Setup

During setup, select the following options:

@itemize
@item
network interface: @var{vio0}, enable @var{dhcp}, no @var{ipv6}
@item
X11: @var{no}
@item
root pw: @var{12345}
@item
change default console to com0 @var{no} (will be set later)
@item
Setup a user: @var{yes} (user @var{miles})
@item
non-root pw: @var{12345}
@item
disable ssh logins to root: @var{no}
@item
location of sets: [ftp] (or [cd]?) @var{ftp}

NOTE: I chose @var{ftp} as installing packages from CD failed with
'dc_attach' errors (and reboot). YMMV.
@item
Change sets to install:
@code{+bsd.mp}
@code{-game55.tgz}
@code{-xfont55.tgz}
@code{-xserv55.tgz}
@code{-xshare55.tgz}
@end itemize

When installation is complete, type "Reboot", to reboot into the newly
installed system (from disk).

@cindex OpenBSD 5.5, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (password: @var{12345}).

Enable Serial Console for amd64/i386 targets
(see @url{http://www.openbsd.org/faq/faq7.html#SerCon}):
@example
echo "set tty com0" >> /etc/boot.conf
@end example
NOTE: Using @var{com0} will prevent QEMU's @option{-curses} from showing
console log on the screen (though login will still be possible).

Enable Login on Serial Console:
@example
sed '/^console/s/off secure/on secure/' /etc/ttys > /tmp/t \
    && mv /tmp/t /etc/ttys
@end example

Shorten boot-loader timeout:
@example
echo "set timeout 1" >> /etc/boot.conf
@end example

Enable Sudo without password for 'wheel' members
@example
sed '/^# %wheel.*NOPASSWD:/s/^# //' /etc/sudoers > /tmp/s \
    && mv /tmp/s /etc/sudoers && chmod 0440 /etc/sudoers
@end example

Stop the VM with @command{/sbin/halt}, tag the QCOW2 file @file{openbsd55.qcow2}
 as 'clean-install'. A pre-build image is available for
download, see @xref{Downloads}.


@cindex OpenBSD 5.5, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{openbsd55.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
echo 'PKG_PATH="ftp://mirrors.nycbug.org/pub/OpenBSD/5.5/packages/$(machine -a)/"' >> .profile
echo 'export PKG_PATH' >> .profile

echo autoconf-2.69p1 automake-1.14.1 gperf wget \
     xz rsync-3.1.0 git bison | xargs -n1 pkg_add -v
@end example

Setup autotools for user miles:
@example
echo AUTOMAKE_VERSION=1.14 >> ~miles/.profile
echo AUTOCONF_VERSION=2.69 >> ~miles/.profile
echo export AUTOMAKE_VERSION AUTOCONF_VERSION >> ~miles/.profile
@end example
Without these settings, running @command{autoconf} will terminate with an
error message complaining about having to select a specific version.


Stop the VM with @command{/sbin/halt},
Enter QEMU's monitor mode (type @kbd{CTRL-A, c}),
Run @command{commit all} to save changes to @file{openbsd55.qcow2},
Then @command{quit} to terminate QEMU.

Tag the @file{openbsd55.qcow2} as `build-ready`.
A pre-build image is available for download, see @xref{Downloads}.

@c ***********************************************************
@c Net BSD 6.1.4
@c ***********************************************************
@node NetBSD 6.1.4, Minix R3.3.0, OpenBSD 5.5, Build Recipes
@section NetBSD 6.1.4
@cindex NetBSD 6.1.4, build recipe
@cindex build recipe, NetBSD 6.1.4

NetBSD Homepage: @url{http://www.netbsd.org}.

NetBSD 6.1.4 Release Announcement:
@url{http://netbsd.org/releases/formal-6/NetBSD-6.1.4.html}.

@cindex NetBSD 6.1.4, download
@unnumberedsubsec Download

ISO: @url{ftp://iso.netbsd.org/pub/NetBSD/iso/6.1.4/NetBSD-6.1.4-amd64.iso}

@cindex NetBSD 6.1.4, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes

Notes:
@itemize
@item
@option{-drive} with disk image with virtio drive MUST APPEAR BEFORE
@option{-cdrom}, otherwise NETBSD will not properly detect the disk size.

@item
During installation, vrtio network drive will return "%100 packet loss"
when pinging to QEMU's 10.0.2.3 - ignore it. QEMU's @option{-nic user}
emulates user-level networking which only allows TCP or UDP, but not ICMP
@end itemize

See the installation script (@file{build_scripts/build_netbsd614.sh}) for
download and QMEU/KVM commands.

@cindex NetBSD 6.1.4, CD Installation
@unnumberedsubsec CD Installation/Setup

During setup, use the default option for most choices.
Note the following:

@itemize
@item
choose "Installation without X11" (instead of "minimal installation"). This
will automatically install @command{gcc} in @file{/usr/bin/gcc}.
Installing GCC later proved to be challenging (fixes are welcomed).

@item
When setting up disk, choose "Use Entire DisK".

@item
Use only one (root) partition (the default) - do not add space to other parittions

@item
Install From: Select @var{CD-ROM}

@item
In "configure additional items" menu:

@itemize
@item Choose "enable sshd" = @var{yes}
@item Select "configure network", enable DHCP, but it will fail (because QEMU user-mode network doesn't allow pings)
@item Don't bother with "binary packages" (it will fail, will be setup after boot).
@item Select "exit" to complete the installation.
@end itemize

@end itemize

When back in the shell, run @command{reboot}.
After reboot, system will boot from installed disk.

@cindex NetBSD 6.1.4, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (password: @var{12345}).

Enable DHCP:
@example
echo "dhclient=YES" >> /etc/rc.conf
@end example

And immediately reboot (run @command{reboot}) to verify DHCP settings work.
Alternatively, run @command{/sbin/dhclient viof0} to force dhclient update.

Add "pkgin" system
(see @url{http://www.unixmen.com/howto-install-pkgin-on-netbsd-6/}):
@example
echo 'export "PKG_PATH=http://ftp.netbsd.org/pub/pkgsrc/packages/NetBSD/$(uname -m)/6.1.4/All;$@{PKG_PATH@}"' >> ~/.profile
. ~/.profile
pkg_add -v pkgin
pkgin -y update
@end example

Install sudo, enable 'wheel' group members to sudo without password:
@example
pkgin -y install sudo
sed '/^# %wheel.*NOPASSWD:/s/^# //' /usr/pkg/etc/sudoers > /tmp/s \
  && mv /tmp/s /usr/pkg/etc/sudoers
@end example

Add user @var{miles}:
@example
useradd -G wheel -m miles
passwd miles # user password '12345', type it 4 times because it's weak
@end example

Enable console on serial port:
@example
echo "consdev=auto" >> /boot.cfg
@end example

NOTE 1: allows login with QEMU's @option{-curses} but not kernel/console/log
messages.

NOTE 2: no need to update @file{/etc/ttys} - "console" is on by default.

Shorten boot delay:
@example
sed '/^timeout=/s/=.*/=1/' /boot.cfg > /tmp/b \
    && mv /tmp/b /boot.cfg
@end example

Stop the VM with @command{/sbin/halt}, tag the QCOW2 file @file{netbsd614.qcow2}
 as 'clean-install'. A pre-build image is available for
download, see @xref{Downloads}.

@cindex NetBSD 6.1.4, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{netbsd614.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
echo git-base binutils bison perl autoconf \
     automake wget rsync pkg-config bash gperf \
     gettext gmake bmake gtexinfo | xargs -n1 pkgin -y install
@end example

Stop the VM with @command{/sbin/halt},
Enter QEMU's monitor mode (type @kbd{CTRL-A, c}),
Run @command{commit all} to save changes to @file{netbsd614.qcow2},
Then @command{quit} to terminate QEMU.

Tag the @file{netbsd614.qcow2} as `build-ready`.
A pre-build image is available for download, see @xref{Downloads}.

@c ***********************************************************
@c FreeBSD 10
@c ***********************************************************
@node FreeBSD 10, Minix R3.3.0, NetBSD 6.1.4, Build Recipes
@section FreeBSD 10
@cindex FreeBSD 10, build recipe
@cindex build recipe, FreeBSD 10

@cindex FreeBSD 10, download
@unnumberedsubsec Download

ISO @url{ftp://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/10.0/FreeBSD-10.0-RELEASE-amd64-disc1.iso}

@cindex FreeBSD 10, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes
FreeBSD 10 works well with the default QEMU/KVM settings.

See the installation script (@file{build_scripts/build_freebsd10.sh}) for
download and QMEU/KVM commands.

@cindex FreeBSD 10, CD Installation
@unnumberedsubsec CD Installation/Setup

During setup, use the default option for most choices.
Note the following:

@itemize
@item Hostname: @var{freebsd10}
@item Distribution select: @var{none}
@item Partitioning: @var{guided}
@item Parition: @var{Entire disk}
@item Partition Editor: Use disk @var{vtbd0}, select @var{finish} then @var{commit}
@item root password: @var{12345}
@item Network config: Use @var{vtnet0}, DHCP: @var{yes}, IPv6: @var{no}.
@item Create non-root user: @var{miles}
@item invite user into other groups: @var{wheel}
@item non-root password: @var{12345}
@end itemize

Select @var{reboot} to reboot with the newly installed system.

@cindex FreeBSD 10, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (password: @var{12345}).

Install @command{sudo} and setup 'wheel' group to sudo without password:
@example
env ASSUME_ALWAYS_YES=YES pkg update
env ASSUME_ALWAYS_YES=YES pkg install sudo
sed -i.bak '/^# %wheel.*NOPASSWD:/s/^# //' /usr/local/etc/sudoers
@end example

Enable Console Login on serial port
(see @url{https://www.freebsd.org/doc/handbook/serialconsole-setup.html}):
@example
echo 'consolcomconsole,vidconsole"' >> /boot/loader.conf
sed -i.bak -e '/^ttyu0/s/off/on/' -e '/^ttyu0/s/dialup/vt100/' /etc/ttys
@end example

Reduce bootloader wait time:
@example
echo 'autoboot_delay="1"' >> /boot/loader.conf
@end example

Stop the VM with @command{/sbin/halt}, tag the QCOW2 file @file{freebsd10.qcow2}
 as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex FreeBSD 10, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{freebsd10.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
echo pkgconf gperf autoconf automake git bison wget rsync \
     help2man nano libtool \
     | xargs -n1 env ASSUME_ALWAYS_YES=YES pkg install
@end example

@unnumberedsubsec PreTest Scripts

@file{pretest-guest-init} and @file{pretest-auto-build-check} are installed
in @file{/usr/local/bin}.

A start-up init script @file{/etc/rc.d/pretest-guest-init} is added, with:
@example
#!/bin/sh
#
# PreTest startup script
# http://www.nongnu.org/pretest/
#

# PROVIDE: guestinit
# REQUIRE: LOGIN

. /etc/rc.subr

name="guestinit"
start_cmd="pretest_guest_init_start"
stop_cmd="pretest_guest_init_stop"

pretest_guest_init_start()
{
        /usr/local/bin/pretest-guest-init
}

pretest_guest_init_stop()
{
}

load_rc_config $name
run_rc_command "$1"
@end example

And is made executable:
@example
chmod a+x /etc/rc.d/pretest-guest-init
@end example

@unnumberedsubsec PreTest Image Preparation

Run @command{/sbin/halt} to stop the machine, press @kbd{CTRL-A,c} to switch
to QEMU's monitor, run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.

@c ***********************************************************
@c FreeBSD 9.3
@c ***********************************************************
@node FreeBSD 9.3, Minix R3.3.0, FreeBSD 10, Build Recipes
@section FreeBSD 9.3
@cindex FreeBSD 9.3, build recipe
@cindex build recipe, FreeBSD 9.3

Homepage: @url{https://www.freebsd.org/}

Version announcement: @url{https://www.freebsd.org/releases/9.3R/announce.html}

@cindex FreeBSD 9.3, download
@unnumberedsubsec Download

ISO @url{ftp://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/9.3/FreeBSD-9.3-RELEASE-amd64-bootonly.iso}

@cindex FreeBSD 9.3, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes
FreeBSD 9.3 works well with the default QEMU/KVM settings.

See the installation script (@file{build_scripts/build_freebsd93.sh}) for
download and QMEU/KVM commands.

@cindex FreeBSD 9.3, CD Installation
@unnumberedsubsec CD Installation/Setup

During setup, use the default option for most choices.
Note the following:

@itemize
@item Network config: Use @var{vtnet0}, DHCP: @var{yes}, IPv6: @var{no}.
@item Partitioning: @var{guided}
@item Parition: @var{Entire disk}
@item Partition Editor: Use disk @var{vtbd0}, select @var{finish} then @var{commit}
@item root password: @var{12345}
@item system configuration: select @var{sshd}, @var{dumpdev}
@item Create non-root user: @var{miles}
@item invite user into other groups: @var{wheel}
@item non-root password: @var{12345}
@item Select @var{Apply configuration and Exit Installer}
@end itemize

Select @var{reboot} to reboot with the newly installed system.

@cindex FreeBSD 9.3, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (password: @var{12345}).

Install @command{sudo} and setup 'wheel' group to sudo without password:
@example
pkg_add -r sudo
sed -i.bak '/^# %wheel.*NOPASSWD:/s/^# //' /usr/local/etc/sudoers
@end example

Enable Console Login on serial port
(see @url{https://www.freebsd.org/doc/handbook/serialconsole-setup.html}):
@example
echo 'consolcomconsole,vidconsole"' >> /boot/loader.conf
@end example
(NOTE: No need to modify @file{/etc/ttys} -
@file{ttyu0} will be atuomatically on if console is serial.)

Reduce bootloader wait time:
@example
echo 'autoboot_delay="1"' >> /boot/loader.conf
@end example

Stop the VM with @command{/sbin/halt}, tag the QCOW2 file @file{freebsd93.qcow2}
 as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex FreeBSD 9.3, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{freebsd93.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
echo autoconf automake git wget rsync nano help2man libtool \
     | xargs -n1  pkg_add -r
@end example

@unnumberedsubsec PreTest Scripts

@file{pretest-guest-init} and @file{pretest-auto-build-check} are installed
in @file{/usr/local/bin}.

A start-up init script @file{/etc/rc.d/pretest-guest-init} is added, with:
@example
#!/bin/sh
#
# PreTest startup script
# http://www.nongnu.org/pretest/
#

# PROVIDE: guestinit
# REQUIRE: LOGIN

. /etc/rc.subr

name="guestinit"
start_cmd="pretest_guest_init_start"
stop_cmd="pretest_guest_init_stop"

pretest_guest_init_start()
{
        /usr/local/bin/pretest-guest-init
}

pretest_guest_init_stop()
{
}

load_rc_config $name
run_rc_command "$1"
@end example

And is made executable:
@example
chmod a+x /etc/rc.d/pretest-guest-init
@end example

@unnumberedsubsec PreTest Image Preparation

Run @command{/sbin/halt} to stop the machine, press @kbd{CTRL-A,c} to switch
to QEMU's monitor, run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.


@c ***********************************************************
@c Minix R3.3.0
@c ***********************************************************
@node Minix R3.3.0, Debian 7.6, FreeBSD 9.3, Build Recipes
@section Minix R3.3.0
@cindex Minix R3.3.0, build recipe
@cindex build recipe, Minix R3.3.0

Home Page: @url{http://www.minix3.org/}

@cindex MINIX R3.3.0, download
@unnumberedsubsec Download

Downloaded from: @url{http://www.minix3.org/download/}

ISO @url{http://download.minix3.org/iso/minix_R3.3.0-588a35b.iso.bz2}

@cindex MINIX R3.3.0, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes

First boot must use "-hda" and "-cdrom", can't use "virtio" during installation.
After installation, re-configure as virto, see
@url{http://wiki.minix3.org/UsersGuide/RunningOnQemu}

MINIX seems to require a VGA adapter (using @option{-nographic -nodefaults}
prevents successful booting).

See the installation script (@file{build_scripts/build_minixR330.sh}) for
download and QMEU/KVM commands.

@cindex MINIX R3.3.0, CD Installation
@unnumberedsubsec CD Installation/Setup

Hack note: The default MINIX3 setup allocates 128MB for the root partition,
with the rest of the space for @file{/usr} and @file{/home}.
For @emph{pretest}, we prefer a large @file{/tmp} directory, and so we modify
the setup script to allocate larger root partition.

Setup steps:
@itemize
@item Boot from CD (or run @file{build_minixR330.sh})
@item Login with "Root" (no password)
@item run:
@example
     sed '/^ROOTMB=128/s/=128/=2048/' /bin/setup > /bin/mysetup
     chmod a+x /bin/mysetup
@end example
This will create a new setup script (@file{/bin/mysetup}) which defaults to
a large (2GB) root partition.
@item Start the MINIX installation program by running @command{/bin/mysetup}
@item Choose 'us-std' keyboard
@item Choose 'auto' mode to use custom disk partitioning
@item Choose @file{/home} partition to be ~1100 MB
@item Use default answers for other questions
@item Network card: @var{virtio}
@item Network configuration: @var{DHCP}
@end itemize

Once installation completes, run @command{reboot} to reboot with the
newly installed system.

@cindex MINIX R3.3.0, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (no password).

Setup serial console
(see @url{https://groups.google.com/forum/#!topic/Minix3/cyY9NX6SLeo}):
@example
sed '/rootdevname=c0d0p0s0 $/s/$/console=tty00 /' /boot.cfg > /tmp/a \
    && mv /tmp/a /boot.cfg
@end example
NOTE 1: allows login with "-curses" but not kernel/console/log messages

NOTE 2: no need to update /etc/ttys - "console"is "on" by default

Shorten boot delay:
@example
sed '/^timeout=/s/=.*/=1/' /boot.cfg > /tmp/b \
    && mv /tmp/b /boot.cfg
@end example

Setup non-root user @var{miles}:
@example
useradd -m miles
passwd miles     # use @var{12345}, type it 3 times
@end example

Stop the VM with @command{halt},
tag the QCOW2 file @file{minixR330.qcow2} as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex MINIX R3.3.0, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{minixR330.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (no password).

Install development-related packages
(see @url{http://wiki.minix3.org/en/UsersGuide/InstallingBinaryPackages}):
@example
pkgin -y update
echo vim openssh git-base binutils clang bison perl \
     autoconf automake wget rsync pkg-config bash \
     gperf gettext gmake bmake | xargs -n1 pkgin -y install
@end example

Minix uses @command{clang} but does not have @command{cc} by default,
add a soft link (for easier @command{./configure} usage):
@example
ln -s $(which clang) /usr/bin/cc
@end example

Replace defective @command{wget} with a working older version:

The default @command{wget} on MINIX3 exhibits two problems:
@url{http://www.perzl.org/aix/index.php?n=FAQs.FAQs#wget-warning-msg} and
@url{https://groups.google.com/d/msg/minix3/t1G13l4WJcQ/-Y6WfFAXCYkJ}.

A temporary work-around is to install an old @command{wget} which doesn't use
@code{MSG_PEEK} in @code{recv(2)}.
@example
cd /tmp/
curl -o wget-1.9.tar.gz http://ftp.gnu.org/gnu/wget/wget-1.9.tar.gz
tar -xzf wget-1.9.tar.gz
cd wget-1.9
./configure CC=clang --without-ssl --disable-threads
make
make install
cd ..
rm -r ./wget-1.9*
@end example

Run @command{/sbin/halt} to stop the machine,
press @kbd{CTRL-A,c} to switch to QEMU's monitor,
run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.



@c ***********************************************************
@c Debian 7.6
@c ***********************************************************
@node Debian 7.6, Debian Compilers Pack, Minix R3.3.0, Build Recipes
@section Debian 7.6
@cindex Debian 7.6, build recipe
@cindex build recipe, Debian 7.6

Home Page: @url{http://www.debian.org}

Version Announcement: @url{https://www.debian.org/News/2014/20140712}

@cindex Debian 7.6, download
@unnumberedsubsec Download

Net-Install ISOs: @url{https://www.debian.org/CD/netinst/}

ISO: @url{http://cdimage.debian.org/debian-cd/7.6.0/amd64/iso-cd/debian-7.6.0-amd64-netinst.iso}

@cindex Debian 7.6, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes

Debian 7.6 installer requires a graphical monitor (doesn't work with QEMU's
@option{-curses}).

See the installation script (@file{build_scripts/build_debian76.sh}) for
download and QMEU/KVM commands.

@cindex Debian 7.6, CD Installation
@unnumberedsubsec CD Installation/Setup

During setup, use the default option for most choices.
Note the following:

@itemize
@item root password: @var{12345}
@item Full name for new user: @var{miles}
@item user name for your account: @var{miles}
@item password for new user: @var{12345}
@item Partition method: @var{guided - use entire disk}
@item Select disk to partition: @var{virtual disk1}
@item Partition scheme: @var{All files on one partition}
@item Select @var{Finision paritition and write changes to disk}
@item Write changes to disk: Select @var{yes}
@item Choose Software to install: Select @var{SSH Server} and
@var{Standard System Utilities}
@item Install Grub Boot loader: @var{yes}
@end itemize

When installation is complete: choose @var{continue} to reboot with the
newly installed system.

@cindex Debian 7.6, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (password: @var{12345}).

Install @command{sudo} and setup 'sudo' group to sudo without password:
@example
apt-get -y install sudo
adduser miles sudo
sed -i -e '/^%sudo/s/ALL$/NOPASSWD: ALL/' /etc/sudoers
@end example

Enable Console Login on serial port:
@example
sed -i -e '/GRUB_CMDLINE_LINUX_DEFAULT=/s/"$/ modprobe.blacklist=cirrus"/' \
       -e '/GRUB_CMDLINE_LINUX_DEFAULT=/s/"$/ text console=tty0 console=ttyS0,9600n8"/' \
       -e '/GRUB_TERMINAL=/s/=.*/=console/' \
       /etc/default/grub
@end example

Reduce bootloader wait time:
@example
sed -i -e '/^GRUB_TIMEOUT=/s/=.*/=1/' /etc/default/grub
@end example

Update GRUB boot-loader:
@example
update-grub
@end example

Enable serial console login/getty:
@example
sed -i -e '/^#T0/s/^#//' /etc/inittab
@end example
NOTE: default Debian installation already contains a commented-out setting,
just need to uncomment it.

Stop the VM with @command{shutdown -h now},
tag the QCOW2 file @file{debian76.qcow2} as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex Debian 7.6, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{debian76.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
apt-get -y update && apt-get -y upgrade
apt-get install -y build-essential ca-certificates \
    autopoint automake autoconf gettext \
    git gawk vim wget rsync gperf pkg-config help2man \
    libtool libncurses-dev
@end example

@unnumberedsubsec PreTest Scripts

@file{pretest-guest-init} and @file{pretest-auto-build-check} are installed
in @file{/usr/local/bin}.

@file{pretest-guest-init} is started from @file{/etc/rc.local}.

@unnumberedsubsec PreTest Image Preparation

Run @command{shutdown -H now} to stop the virtual machine @emph{without}
terminating QMEU,
press @kbd{CTRL-A,c} to switch to QEMU's monitor,
run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.


@c ***********************************************************
@c Debian Compilers Pack
@c ***********************************************************
@node Debian Compilers Pack, CentOS 7.0,Debian 7.6, Build Recipes
@section Debian Compilers Pack
@cindex Debian Compilers Pack, build recipe
@cindex build recipe, Debian Compilers Pack

The @emph{Debian Compilers Pack} is a virtual machine image pre-configured
with multiple compilers and cross-compilers.

Home Page: @url{http://www.emdebian.org/}

See @ref{Debian Compilers Pack Usage} for usage examples.

@cindex Debian Compilers Pack, Setup build tools
@unnumberedsubsec Setup build tools

Start with the @ref{Debian 7.6} 'build-ready' image (@file{debian76.qcow2})
and use the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Add emdebian sources:
@example
echo "deb http://ftp.us.debian.org/debian/ squeeze main
deb http://www.emdebian.org/debian/ squeeze main" \
   > /etc/apt/sources.list.d/emdebian.list
@end example

Install Emdebian's keyring and update packages
@example
sudo apt-get install emdebian-archive-keyring
sudo apt-get update
@end example

Install Armel GCC cross-compiler
@example
apt-get -y install gcc-4.3-arm-linux-gnueabi \
     libc6-armel-cross \
     libc6-dev-armel-cross \
     libc-dev-bin-armel-cross \
     linux-libc-dev-armel-cross
@end example

Install PowerPC GCC cross-compiler
@example
apt-get -y install gcc-4.3-powerpc-linux-gnu g++-4.3-powerpc-linux-gnu \
      libc-bin-powerpc-cross \
      libc-dev-powerpc-cross \
      libc-dev-bin-powerpc-cross \
      linux-libc-dev-powerpc-cross
@end example

Install MIPS GCC cross-compiler
@example
apt-get -y install  g++-4.3-mips-linux-gnu gcc-4.3-mips-linux-gnu \
       libc-bin-mips-cross \
       libc-dev-mips-cross \
       libc-dev-bin-mips-cross \
       linux-libc-dev-mips-cross
@end example

Install MinGW 32/64 bit cross-compilers
@example
apt-get -y install binutils-mingw-w64-i686 binutils-mingw-w64-x86-64 \
       gcc-mingw-w64-i686 gcc-mingw-w64-x86-64 \
       g++-mingw-w64-i686 g++-mingw-w64-x86-64 \
       mingw-w64-i686-dev mingw-w64-x86-64-dev \
       mingw-w64-tools
@end example

Install additional native compilers: @command{clang} and
@command{tcc} (Tiny C Compiler):
@example
apt-get -y install tcc clang
@end example

Setup @code{binfmt} with QEMU's static emulation
(This will allow running cross-compiled binaries on the host system):
@example
apt-get -y install qemu binfmt-support qemu-user-static
ln -s /usr/arm-linux-gnueabi /etc/qemu-binfmt/arm
ln -s /usr/mips-linux-gnu /etc/qemu-binfmt/mips
ln -s /usr/powerpc-linux-gnu /etc/qemu-binfmt/ppc
@end example

Run @command{shutdown -H -h now} to stop the virtual machine @emph{without}
terminating QMEU,
press @kbd{CTRL-A,c} to switch to QEMU's monitor,
run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'compilers-pack'.
A pre-build image is available for download, see @xref{Downloads}.

@c ***********************************************************
@c gNewSense 3.1
@c ***********************************************************
@node gNewSense 3.1, CentOS 7.0, Debian Compilers Pack, Build Recipes
@section gNewSense 3.1
@cindex gNewSense 3.1, build recipe
@cindex build recipe, gNewSense 3.1

gNewSense is a Free/Libre Operating System, based on GNU/Linux Debian.

gNewSense 3.1 is based on Debian GNU/Linux 6.

Home Page: @url{http://www.gnewsense.org/}

Version Announcement: @url{https://savannah.nongnu.org/forum/forum.php?forum_id=7880}

@cindex gNewSense 3.1, download
@unnumberedsubsec Download

ISO @url{http://archive.gnewsense.org/gnewsense-three/gnewsense/dists/parkes/main/installer-amd64/current/images/netboot/mini.iso}

@cindex gNewSense 3.1, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes

gNewSense 3.1 installer requires a graphical monitor (doesn't work with QEMU's
@option{-curses}).

See the installation script (@file{build_scripts/build_gnewsense31.sh}) for
download and QMEU/KVM commands.

@cindex gNewSense 3.1, CD Installation
@unnumberedsubsec CD Installation/Setup

During setup, use the default option for most choices.
Note the following:

@itemize
@item hostname: @var{gnewsense31}
@item domain name: @var{(empty)}
@item root password: @var{12345}
@item Full name for new user: @var{miles}
@item user name for your account: @var{miles}
@item password for new user: @var{12345}
@item Partition method: @var{guided - use entire disk}
@item Select disk to partition: @var{virtual disk1}
@item Partition scheme: @var{All files on one partition}
@item Select @var{Finision paritition and write changes to disk}
@item Write changes to disk: Select @var{yes}
@item Choose Software to install: Select @var{SSH Server} and
@var{Standard System Utilities}
@item Install Grub Boot loader: @var{yes}
@end itemize

When installation is complete: choose @var{reboot} to reboot with the
newly installed system.

@cindex gNewSense 3.1, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (password: @var{12345}).

Install @command{sudo} and setup 'sudo' group to sudo without password:
@example
apt-get -y install sudo
adduser miles sudo
sed -i -e '/^%sudo/s/ALL$/NOPASSWD: ALL/' /etc/sudoers
@end example

Enable Console Login on serial port:
@example
sed -i -e '/GRUB_CMDLINE_LINUX_DEFAULT=/s/"$/ modprobe.blacklist=cirrus"/' \
       -e '/GRUB_CMDLINE_LINUX_DEFAULT=/s/"$/ text console=tty0 console=ttyS0,9600n8"/' \
       -e '/GRUB_TERMINAL=/s/=.*/=console/' \
       /etc/default/grub
@end example

Reduce bootloader wait time:
@example
sed -i -e '/^GRUB_TIMEOUT=/s/=.*/=1/' /etc/default/grub
@end example

Update GRUB boot-loader:
@example
update-grub
@end example

Enable serial console login/getty:
@example
sed -i -e '/^#T0/s/^#//' /etc/inittab
@end example
NOTE: default gNewSense installation already contains a commented-out setting,
just need to uncomment it.

Stop the VM with @command{shutdown -h now},
tag the QCOW2 file @file{gnewsense31.qcow2} as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex gNewSense 3.1, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{gnewsense31.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
apt-get -y update && apt-get -y upgrade
apt-get install -y build-essential ca-certificates \
    autopoint automake autoconf gettext \
    git gawk vim wget rsync gperf pkg-config help2man \
    libtool libncurses-dev
@end example

@unnumberedsubsec PreTest Scripts

@file{pretest-guest-init} and @file{pretest-auto-build-check} are installed
in @file{/usr/local/bin}.

@file{pretest-guest-init} is started from @file{/etc/rc.local}.

@unnumberedsubsec PreTest Image Preparation

Run @command{shutdown -H now} to stop the virtual machine @emph{without}
terminating QMEU,
press @kbd{CTRL-A,c} to switch to QEMU's monitor,
run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.


@c ***********************************************************
@c Cent OS 7.0
@c ***********************************************************
@node CentOS 7.0, CentOS 6.5, gNewSense 3.1, Build Recipes
@section CentOS 7.0
@cindex CentOS 7.0, build recipe
@cindex build recipe, CentOS 7.0

Home Page: @url{http://www.centos.org/}

Version Announcement: @url{http://lists.centos.org/pipermail/centos-announce/2014-July/020393.html}

@cindex CentOS 7.0, download
@unnumberedsubsec Download

Downloads: @url{http://www.centos.org/download/}

ISO @url{http://mirror.us.leaseweb.net/centos/7.0.1406/isos/x86_64/CentOS-7.0-1406-x86_64-NetInstall.iso}

@cindex CentOS 7.0, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes

CentOS 7 installation requires a graphic monitor, QEMU's @option{-curses} can
not be used. Installation also requires a high-resolution monitor (QEMU's
@option{-vga cirrus} is sufficient, but @option{-vga std} is not).

CentOS 7 installation requires 512 MB of RAM.

See the installation script (@file{build_scripts/build_centos7.sh}) for
download and QMEU/KVM commands.

@cindex CentOS 7.0, CD Installation
@unnumberedsubsec CD Installation/Setup

CentOS 7 Installer is graphical. Configure the VM by selecting the options
in the following order:
@itemize
@item Setup network
@itemize
@item click @var{Network & Hostname}.
@item then enable @var{eth0} by clicking on the "OFF/ON" button,
@item Set @var{Hostname} to @var{centos7} (edit-box on bottom of the screen)
@item click @var{done} (blue botton on top-left corner)
@end itemize

@item Setup Installation Source
@itemize
@item Enter @var{http://mirror.centos.org/centos/7/os/x86_64/}
@item click @var{done} (blue botton on top-left corner)
@end itemize

@item Software Selection
@itemize
@item select @var{minimal install}, without any additional options (e.g. no "development toosl")
@item click @var{done} (blue botton on top-left corner)
@end itemize

@item Installation Destination
@itemize
@item Select @var{vda} disk (should bbe highlighted in blue)
@item Partition: select @var{automatically configure partitioning}
@item Select @var{NO encryption}
@item click @var{done} (blue botton on top-left corner)
@end itemize

@item click @var{begin installation} button (bottom right)

@item Click @var{root password}
Enter @var{12345} (password is weak, must click "done" twice to confirm).

@item Click @var{user creation}
Full name: @var{miles}, User name @var{miles},
Select @var{make this user administrator},
Enter password @var{12345}, (password is weak, must click "done" twice to confirm).

@item Wait until installating is complete (progress bar on the bottom of the screen)

@end itemize

Once installation completes, click the @command{reboot} button (bottom-right
corner) to reboot with the newly installed system.

@cindex CentOS 7.0, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (password: @var{12345}).

Install @command{sudo} and setup 'wheel' group to sudo without password:
@example
@end example

Enable Console on serial port:
@example
sed -i -e '/GRUB_CMDLINE_LINUX=/s/"$/ modprobe.blacklist=cirrus"/' \
       -e '/GRUB_CMDLINE_LINUX=/s/"$/ text console=tty0 console=ttyS0,9600n8"/' \
       /etc/default/grub
@end example

Reduce bootloader wait time:
@example
sed -i -e '/^GRUB_TIMEOUT=/s/=.*/=1/' /etc/default/grub
@end example

Update GRUB bootloader configuration:
@example
grub2-mkconfig -o /boot/grub2/grub.cfg
@end example

Enable @command{sudo} without password for 'wheel' group members:
@example
sed -i '/^# %wheel.*NOPASSWD:/s/^# //' /etc/sudoers
@end example

Stop the VM with @command{/sbin/halt},
tag the QCOW2 file @file{centos7.qcow2} as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex CentOS 7.0, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{centos7.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
yum -y update
yum groupinstall -y "Development Tools"
yum -y install wget gperf texinfo nano help2man ncurses-devel
@end example

@unnumberedsubsec PreTest Scripts

@file{pretest-guest-init} and @file{pretest-auto-build-check} are installed
in @file{/usr/local/bin}.

@file{pretest-guest-init} is started from @command{Systemd} configuration
file @file{/usr/lib/systemd/system/pretest-guest-init.service}:
@example
# PreTest Guest Init Script
# See http://www.nongnu.org/pretest/
[Unit]
Description=Pretest Guest Init
After=rc-local.service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/pretest-guest-init
ExecStop=

[Install]
WantedBy=multi-user.target
@end example

Then running @command{systemctl enable pretest-guest-init.service} to enable
this service at boot time.

@unnumberedsubsec PreTest Image Preparation

Run @command{shutdown -H now} to stop the virtual machine @emph{without}
terminating QMEU,
press @kbd{CTRL-A,c} to switch to QEMU's monitor,
run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.

@c ***********************************************************
@c CentOS 6.5
@c ***********************************************************
@node CentOS 6.5, Ubuntu 14.04.1, CentOS 7.0, Build Recipes
@section CentOS 6.5
@cindex CentOS 6.5, build recipe
@cindex build recipe, CentOS 6.5

Home Page: @url{http://www.centos.org}

Version Announcement: @url{http://lists.centos.org/pipermail/centos-announce/2013-December/020032.html}

@cindex CentOS 6.5, download
@unnumberedsubsec Download

Downloads for 6.5: @url{http://isoredirect.centos.org/centos/6/isos/x86_64/}

ISO @url{http://centos.escapemg.com/6.5/isos/x86_64/CentOS-6.5-x86_64-netinstall.iso}

@cindex CentOS 6.5, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes

CentOS 6.5 installation requires a graphic monitor, QEMU's @option{-curses} can
not be used.

CentOS 6.5 installation requires 512 MB of RAM (installer will still complain
about not enough memory for graphical installer, and switch to textual
installer).

See the installation script (@file{build_scripts/build_centos65.sh}) for
download and QMEU/KVM commands.

@cindex CentOS 6.5, CD Installation
@unnumberedsubsec CD Installation/Setup

During setup, use the default option for most choices.
Note the following:

@itemize
@item installation source: select @var{URL}
@item Configure TCP/IP: Enable IPv4: @var{yes};
Dynamic IP Configuration (DHCP): @var{yes};
Enable IPv6: @var{no}.
@item URL Setup: @var{http://mirror.centos.org/centos/6.5/os/x86_64/}

@item If prompted with "WARNING" "This device may need to be RE-INITIALIZE DISK",
click @var{Re-Initialize all}.

@item Root password: @var{123456} (NOTE: will change it later to 12345)
@item Weak password warning: @var{use anyway}

@item Partitioning type: @var{Replace Eixsting Linux System}
@item (Wait for package installtion)

@end itemize

Once installation completes, run @command{reboot} to reboot with the
newly installed system.

@cindex CentOS 6.5, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (password: @var{123456}).

Change root password to 12345:
@example
printf "12345\n12345\n" | passwd root
@end example

Create user 'miles', add to 'wheel' group, set password to 12345:
@example
useradd -m -G wheel miles
printf "12345\n12345\n" | passwd miles
@end example

Enable %wheel group to sudo without password
@example
sed -i '/^# %wheel.*NOPASSWD:/s/^# //' /etc/sudoers
@end example

Enable Console Login on serial port
(see @url{http://www.cyberciti.biz/faq/centos-rhel-6-install-serial-console/}):
@example
sed -i -e '/hiddenmenu/aterminal serial console' \
       -e '/hiddenmenu/aserial --unit=1 --speed=9600' \
       -e '/splashimage/s/^/# /' \
       -e '/kernel \//s/quiet//' \
       -e '/kernel \//s/$/ console=tty0 console=ttyS0,9600n8/' \
       /boot/grub/grub.conf
@end example

Enable root login on serial port
@example
echo "ttyS0" >>  /etc/securetty
@end example
NOTE: there's already @file{/etc/init/serial.conf} which auto-starts getty
on serial IF it's the kernel's console.

Stop the VM with @command{/sbin/halt},
tag the QCOW2 file @file{centos65.qcow2} as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex CentOS 6.5, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{centos65.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
yum -y update
yum groupinstall -y "Development Tools"
yum -y install wget gperf texinfo nano help2man ncurses-devel
@end example

@unnumberedsubsec PreTest Scripts

@file{pretest-guest-init} and @file{pretest-auto-build-check} are installed
in @file{/usr/local/bin}.

@file{pretest-guest-init} is started from @file{/etc/rc.local}.

@unnumberedsubsec PreTest Image Preparation

Run @command{halt} to stop the virtual machine @emph{without}
terminating QMEU,
press @kbd{CTRL-A,c} to switch to QEMU's monitor,
run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.

@c ***********************************************************
@c Fedora 20
@c ***********************************************************
@node Fedora 20, Ubuntu 14.04.1, CentOS 6.5, Build Recipes
@section Fedora 20
@cindex Fedora 20, build recipe
@cindex build recipe, Fedora 20

Home Page: @url{http://fedoraproject.org/}

Version Announcement: @url{http://docs.fedoraproject.org/en-US/Fedora/20/html/Release_Notes/index.html}

@cindex Fedora 20, download
@unnumberedsubsec Download

NOTE: for the creation of the Fedora VM, the DVD image was used (not the
'net-install'). With the 'net-install' version I was not able to complete
the installation under QEMU (network issues?).

Downloads: @url{http://fedoraproject.org/en/get-fedora-all}

ISO @url{http://download.fedoraproject.org/pub/fedora/linux/releases/20/Fedora/x86_64/iso/Fedora-20-x86_64-DVD.iso}

@cindex Fedora 20, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes

Fedora 20 installation requires a graphic monitor, QEMU's @option{-curses} can
not be used. Installation also requires a high-resolution monitor (QEMU's
@option{-vga cirrus} is sufficient, but @option{-vga std} is not).

Fedora 20 installation requires 512 MB of RAM.

See the installation script (@file{build_scripts/build_fedora20.sh}) for
download and QMEU/KVM commands.

@cindex Fedora 20, CD Installation
@unnumberedsubsec CD Installation/Setup

Fedora 20 Installer is graphical. Configure the VM by selecting the options
in the following order:
@itemize
@item Setup network
@itemize
@item click @var{Network & Hostname}.
@item then enable @var{eth0} by clicking on the "OFF/ON" button,
@item Set @var{Hostname} to @var{fedora20} (edit-box on bottom of the screen)
@item click @var{done} (blue botton on top-left corner)
@end itemize

@item Software Selection
@itemize
@item select @var{minimal install}, with @var{Guest Agents} component.
@item click @var{done} (blue botton on top-left corner)
@end itemize

@item Installation Destination
@itemize
@item Select @var{vda} disk (should be highlighted in blue)
@item After confirming, select the following options in the pop-up dialog:
@item Partition: select @var{automatically configure partitioning}
@item Select @var{NO encryption}
@item click @var{done} (blue botton on top-left corner)
@end itemize

@item click @var{begin installation} button (bottom right)

@item Click @var{root password}
Enter @var{12345} (password is weak, must click "done" twice to confirm).

@item Click @var{user creation}
Full name: @var{miles}, User name @var{miles},
Select @var{make this user administrator},
Enter password @var{12345}, (password is weak, must click "done" twice to confirm).

@item Wait until installating is complete (progress bar on the bottom of the screen)

@end itemize

Once installation completes, click the @command{reboot} button (bottom-right
corner) to reboot with the newly installed system.

@cindex Fedora 20, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (password: @var{12345}).

Enable Console on serial port:
@example
sed -i -e '/GRUB_CMDLINE_LINUX=/s/"$/ modprobe.blacklist=cirrus"/' \
       -e '/GRUB_CMDLINE_LINUX=/s/"$/ text console=tty0 console=ttyS0,9600n8"/' \
       /etc/default/grub
@end example

Reduce bootloader wait time:
@example
sed -i -e '/^GRUB_TIMEOUT=/s/=.*/=1/' /etc/default/grub
@end example

Update GRUB bootloader configuration:
@example
grub2-mkconfig -o /boot/grub2/grub.cfg
@end example

Enable @command{sudo} without password for 'wheel' group members:
@example
sed -i '/^# %wheel.*NOPASSWD:/s/^# //' /etc/sudoers
@end example

Stop the VM with @command{/sbin/halt},
tag the QCOW2 file @file{fedora20.qcow2} as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex Fedora 20, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{fedora20.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
yum -y update
yum groupinstall -y "Development Tools"
yum -y install wget gperf gettext-devel texinfo automake autoconf \
               nano help2man ncurses-devel libtool
@end example

Use disk-based @file{/tmp} (instead of memory-based @code{tmpfs}) -
For build-automation we use VMs with very little memory.
(see @url{http://fedoraproject.org/wiki/Features/tmp-on-tmpfs}.)
@example
systemctl mask tmp.mount
@end example

@unnumberedsubsec PreTest Scripts

@file{pretest-guest-init} and @file{pretest-auto-build-check} are installed
in @file{/usr/local/bin}.

@file{pretest-guest-init} is started from @command{Systemd} configuration
file @file{/usr/lib/systemd/system/pretest-guest-init.service}:
@example
# PreTest Guest Init Script
# See http://www.nongnu.org/pretest/
[Unit]
Description=Pretest Guest Init
After=rc-local.service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/pretest-guest-init
ExecStop=

[Install]
WantedBy=multi-user.target
@end example

Then running @command{systemctl enable pretest-guest-init.service} to enable
this service at boot time.

@unnumberedsubsec PreTest Image Preparation

Run @command{shutdown -H now} to stop the virtual machine @emph{without}
terminating QMEU,
press @kbd{CTRL-A,c} to switch to QEMU's monitor,
run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.

@c ***********************************************************
@c Ubuntu 14.04.1
@c ***********************************************************
@node Ubuntu 14.04.1, Trisquel 6.0.1, Fedora 20, Build Recipes
@section Ubuntu 14.04.1
@cindex Ubuntu 14.04.1, build recipe
@cindex build recipe, Ubuntu 14.04.1

Home Page: @url{http://www.ubuntu.com/}

Version Announcement: @url{http://fridge.ubuntu.com/2014/07/25/ubuntu-14-04-1-lts-released/}

@cindex Ubuntu 14.04.1, download
@unnumberedsubsec Download

Downloads: @url{http://www.ubuntu.com/download/alternative-downloads}

ISO @url{http://archive.ubuntu.com/ubuntu/dists/trusty-updates/main/installer-amd64/current/images/netboot/mini.iso}

@cindex Ubuntu 14.04.1, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes

Ubuntu 14.04.1 installer requires a graphical monitor (doesn't work with QEMU's
@option{-curses}).

See the installation script (@file{build_scripts/build_ubuntu14.sh}) for
download and QMEU/KVM commands.

@cindex Ubuntu 14.04.1, CD Installation
@unnumberedsubsec CD Installation/Setup

During setup, use the default option for most choices.
Note the following:

@itemize
@item Hostname: @var{ubuntu14}
@item Full name for new user: @var{miles}
@item user name for your account: @var{miles}
@item password for new user: @var{12345}
@item Use Weak password: @var{yes}
@item Encrypt home directory: @var{no}
@item Partition method: @var{guided - use entire disk}
@item Select disk to partition: @var{virtual disk1}
@item Write changes to disk: Select @var{yes}
@item (Wait for package installation)
@item Manage upgrade: @var{no automatic upgrades}
@item Choose Software to install: Select @var{OpenSSH Server}.
@item (Wait for package installation)
@item Install Grub Boot loader: @var{yes}
@end itemize

When installation is complete: choose @var{continue} to reboot with the
newly installed system.

@cindex Ubuntu 14.04.1, First Boot
@unnumberedsubsec First Boot ('clean-install')

NOTE: logging in with @var{root} is disabled; must login with
use @var{miles} and password @var{12345} (login with root is enabled below):

Enable @command{sudo} without a password:
@example
sudo sed -i -e '/^%sudo/s/ALL$/NOPASSWD: ALL/' /etc/sudoers
@end example
NOTE: Initially, this command is executed as user @var{miles}, and so requires
@command{sudo} and will ask for a password.

Enable login as root with password 12345 (see
@url{http://askubuntu.com/questions/44418/how-to-enable-root-login}):
@example
printf "12345\n12345\n" | sudo passwd root
sudo passwd -u root
@end example

Use only Free repositories (@code{main} and @code{universe}),
without non-free repositories (@code{restricted} and @code{multiverse}):
@example
echo "deb http://us.archive.ubuntu.com/ubuntu/ trusty main
deb-src http://us.archive.ubuntu.com/ubuntu/ trusty main
deb http://us.archive.ubuntu.com/ubuntu/ trusty-updates main
deb-src http://us.archive.ubuntu.com/ubuntu/ trusty-updates main
deb http://us.archive.ubuntu.com/ubuntu/ trusty universe
deb-src http://us.archive.ubuntu.com/ubuntu/ trusty universe
deb http://us.archive.ubuntu.com/ubuntu/ trusty-updates universe
deb-src http://us.archive.ubuntu.com/ubuntu/ trusty-updates universe
deb http://us.archive.ubuntu.com/ubuntu/ trusty-backports main universe
deb-src http://us.archive.ubuntu.com/ubuntu/ trusty-backports main universe
deb http://security.ubuntu.com/ubuntu trusty-security main
deb-src http://security.ubuntu.com/ubuntu trusty-security main
deb http://security.ubuntu.com/ubuntu trusty-security universe
deb-src http://security.ubuntu.com/ubuntu trusty-security universe" \
  | sudo tee /etc/apt/sources.list
@end example

Enable booting with serial console:
@example
sudo sed -i -e '/GRUB_CMDLINE_LINUX_DEFAULT=/s/"$/ modprobe.blacklist=cirrus"/' \
         -e '/GRUB_CMDLINE_LINUX_DEFAULT=/s/"$/ text console=tty0 console=ttyS0,9600n8"/' \
         -e '/GRUB_TERMINAL=/s/=.*/=console/' \
         /etc/default/grub
@end example

Reduce bootloader wait time:
@example
sudo sed -i -e '/^GRUB_TIMEOUT=/s/=.*/=1/' \
         -e '/^#GRUB_HIDDEN_TIMEOUT/s/^#//' \
         -e '/GRUB_HIDDEN_TIMEOUT=/s/=.*/=1/' \
         /etc/default/grub
@end example

Update GRUB boot-loader configuration:
@example
sudo update-grub
@end example

Create @code{systemd} configuration file for login/getty on serial console
(see @url{https://help.ubuntu.com/community/SerialConsoleHowto}):
@example
echo 'start on stopped rc or RUNLEVEL=[12345]
stop on runlevel [!12345]
respawn
exec /sbin/getty -L 9600 ttyS0 vt102' \
  | sudo tee /etc/init/ttyS0.conf
@end example

Stop the VM with @command{/sbin/halt},
tag the QCOW2 file @file{ubuntu14.qcow2} as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex Ubuntu 14.04.1, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{ubuntu14.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
apt-get install -y build-essential ca-certificates \
    autopoint automake autoconf gettext \
    git gawk vim wget rsync gperf texinfo pkg-config help2man \
    libtool libncurses-dev nano
@end example

@unnumberedsubsec PreTest Scripts

@file{pretest-guest-init} and @file{pretest-auto-build-check} are installed
in @file{/usr/local/bin}.

@file{pretest-guest-init} is started from @file{/etc/rc.local}.

@unnumberedsubsec PreTest Image Preparation

Run @command{shutdown -H now} to stop the virtual machine @emph{without}
terminating QMEU,
press @kbd{CTRL-A,c} to switch to QEMU's monitor,
run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.


@c ***********************************************************
@c Trisquel 6.0.1
@c ***********************************************************
@node Trisquel 6.0.1, DilOS 1.3.7, Ubuntu 14.04.1, Build Recipes
@section Trisquel 6.0.1
@cindex Trisquel 6.0.1, build recipe
@cindex build recipe, Trisquel 6.0.1

Trisquel is a Free/Libre Operating System, based on Ubuntu GNU/Linux.

Trisquel 6.0.1 is based on Ubuntu 12.04 LTS.

Home Page: @url{http://trisquel.info/}

Version Announcement: @url{http://trisquel.info/en/trisquel-gnulinux-601-lts-upgrade-release}

@cindex Trisquel 6.0.1, download
@unnumberedsubsec Download

Downloads: @url{http://trisquel.info/en/download}

NetInstall ISO @url{http://mirror.fsf.org/trisquel-images/trisquel-netinst_6.0.1_amd64.iso}

@cindex Trisquel 6.0.1, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes

Trisquel 6.0.1 installer requires a graphical monitor (doesn't work with QEMU's
@option{-curses}).

See the installation script (@file{build_scripts/build_trisquel601.sh}) for
download and QMEU/KVM commands.

@cindex Trisquel 6.0.1, CD Installation
@unnumberedsubsec CD Installation/Setup

During setup, use the default option for most choices.
Note the following:

@itemize
@item language: @var{english}
@item Hostname: @var{trisquel601}
@item mirror: @var{USA}
@item Full name for new user: @var{miles}
@item user name for your account: @var{miles}
@item password for new user: @var{12345}
@item Use Weak password: @var{yes}
@item Encrypt home directory: @var{no}
@item Partition method: @var{guided - use entire disk}
@item Select disk to partition: @var{virtual disk 1}
@item Write changes to disk: Select @var{yes}
@item (Wait for package installation)
@item Kernel to install: @var{linux-generic}
@item Manage upgrade: @var{no automatic upgrades}
@item Choose Software to install: Select @var{OpenSSH Server},
@var{Trisquel console}, @var{Trisquel mini}
@item (Wait for package installation)
@item Install Grub Boot loader: @var{yes}
@end itemize

When installation is complete: choose @var{reboot} to reboot with the
newly installed system.

@cindex Trisquel 6.0.1, First Boot
@unnumberedsubsec First Boot ('clean-install')

NOTE: logging in with @var{root} is disabled; must login with
use @var{miles} and password @var{12345} (login with root is enabled below):

Enable @command{sudo} without a password:
@example
sudo sed -i -e '/^%sudo/s/ALL$/NOPASSWD: ALL/' /etc/sudoers
@end example
NOTE: Initially, this command is executed as user @var{miles}, and so requires
@command{sudo} and will ask for a password.

Enable login as root with password 12345:
@example
printf "12345\n12345\n" | sudo passwd root
sudo passwd -u root
@end example

Enable booting with serial console:
@example
sudo sed -i -e '/GRUB_CMDLINE_LINUX_DEFAULT=/s/"$/ modprobe.blacklist=cirrus"/' \
         -e '/GRUB_CMDLINE_LINUX_DEFAULT=/s/"$/ text console=tty0 console=ttyS0,9600n8"/' \
         -e '/GRUB_TERMINAL=/s/=.*/=console/' \
         /etc/default/grub
@end example

Reduce bootloader wait time:
@example
sudo sed -i -e '/^GRUB_TIMEOUT=/s/=.*/=1/' \
         -e '/^#GRUB_HIDDEN_TIMEOUT/s/^#//' \
         -e '/GRUB_HIDDEN_TIMEOUT=/s/=.*/=1/' \
         /etc/default/grub
@end example

Update GRUB boot-loader configuration:
@example
sudo update-grub
@end example

Create @code{systemd} configuration file for login/getty on serial console
(see @url{https://help.ubuntu.com/community/SerialConsoleHowto}):
@example
echo 'start on stopped rc or RUNLEVEL=[12345]
stop on runlevel [!12345]
respawn
exec /sbin/getty -L 9600 ttyS0 vt102' \
  | sudo tee /etc/init/ttyS0.conf
@end example

Stop the VM with @command{/sbin/halt},
tag the QCOW2 file @file{trisquel601.qcow2} as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex Trisquel 6.0.1, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{trisquel601.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
apt-get install -y build-essential ca-certificates \
    autopoint automake autoconf gettext \
    git gawk vim wget rsync gperf texinfo pkg-config \
    help2man libtool libncurses-dev nano
@end example

@unnumberedsubsec PreTest Scripts

@file{pretest-guest-init} and @file{pretest-auto-build-check} are installed
in @file{/usr/local/bin}.

@file{pretest-guest-init} is started from @file{/etc/rc.local}.

@unnumberedsubsec PreTest Image Preparation

Run @command{shutdown -H now} to stop the virtual machine @emph{without}
terminating QMEU,
press @kbd{CTRL-A,c} to switch to QEMU's monitor,
run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.

@c ***********************************************************
@c OpenSUSE 13.1
@c ***********************************************************
@node OpenSUSE 13.1, DilOS 1.3.7, Trisquel 6.0.1, Build Recipes
@section OpenSUSE 13.1
@cindex OpenSUSE 13.1, build recipe
@cindex build recipe, OpenSUSE 13.1

Home Page: @url{http://www.opensuse.org}

Version Announcement: @url{https://news.opensuse.org/2013/11/19/opensuse-13-1-ready-for-action/}

@cindex OpenSUSE 13.1, download
@unnumberedsubsec Download

ISO @url{http://mirror.metrocast.net/opensuse/distribution/13.1/iso/openSUSE-13.1-NET-x86_64.iso}

@cindex OpenSUSE 13.1, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes

See the installation script (@file{build_scripts/build_opensuse131.sh}) for
download and QMEU/KVM commands.

@cindex OpenSUSE 13.1, CD Installation
@unnumberedsubsec CD Installation/Setup

During setup, use the default option for most choices.
Note the following:

@itemize
@item Select Mode: @var{New Installation}
@item Desktop Selection: @var{Other -> Minimal Server Selection (text mode)}
@item Suggested Partitioning: @var{(accept the defaults)}, no LVM,
no encryption, no BTRFS.
@item Create new user: username @var{miles}, password @var{12345}. no auto-login.
@end itemize

Once installation completes, run @command{reboot} to reboot with the
newly installed system.

@cindex OpenSUSE 13.1, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (password: @var{12345}).

Add user @var{miles} to the 'sudo' group, enable @command{sudo} without password:
@example
usermod -g wheel miles
sed -i '/^# %wheel.*NOPASSWD:/s/^# //' /etc/sudoers
@end example

Open Port 22 (SSH) in the firewall (see @url{https://en.opensuse.org/SuSEfirewall2}),
and enable SSH server on start-up:
@example
sed -i '/^FW_SERVICES_EXT_TCP=/s/""/"ssh"/'  /etc/sysconfig/SuSEfirewall2
systemctl enable sshd.service
@end example

Enable Console on serial port, reduce boot-loader timeout to 1 second:
@example
sed -i -e '/^GRUB_CMDLINE_LINUX_DEFAULT=/ @{ s/splash=silent/splash=0/ ; s/quiet// ; s/"$/ text nomodeset console=tty0 console=ttyS0,9600n8"/ @}' \
         -e '/^GRUB_TIMEOUT=/s/=.*/=1/' \
         -e '/GRUB_BACKGROUND=/s/^/#/' \
         -e '/GRUB_THEME=/s/^/#/' \
         -e '/GRUB_TERMINAL=/s/=.*/=console/' \
         /etc/default/grub
@end example

Update GRUB boot-loader configuration:
@example
grub2-mkconfig -o /boot/grub2/grub.cfg
@end example

Stop the VM with @command{/sbin/halt},
tag the QCOW2 file @file{opensuse131.qcow2} as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex OpenSUSE 13.1, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{opensuse131.qcow2} with the @command{pretest_run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
zypper update
zypper install -y gcc gcc-c++
zypper install -y -y git automake autoconf bison xz rsync
zypper install -y makeinfo texinfo gperf make nano help2man \
                  libtool ncurses-devel gettext-tools gettext-runtime
@end example

@unnumberedsubsec PreTest Scripts

@file{pretest-guest-init} and @file{pretest-auto-build-check} are installed
in @file{/usr/local/bin}.

@file{pretest-guest-init} is started from @command{Systemd} configuration
file @file{/usr/lib/systemd/system/pretest-guest-init.service}:
@example
# PreTest Guest Init Script
# See http://www.nongnu.org/pretest/
[Unit]
Description=Pretest Guest Init
After=rc-local.service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/pretest-guest-init
ExecStop=

[Install]
WantedBy=multi-user.target
@end example

Then running @command{systemctl enable pretest-guest-init.service} to enable
this service at boot time.

@unnumberedsubsec PreTest Image Preparation

Run @command{shutdown -H now} to stop the virtual machine @emph{without}
terminating QMEU,
press @kbd{CTRL-A,c} to switch to QEMU's monitor,
run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.

@c ***********************************************************
@c DilOS 1.3.7
@c ***********************************************************
@node DilOS 1.3.7, Downloads, OpenSUSE 13.1, Build Recipes
@section DilOS 1.3.7
@cindex DilOS 1.3.7, build recipe
@cindex build recipe, DilOS 1.3.7

DilOS uses Illumos (formally OpenSolaris) kernel with Debian-based packaing
system.

Home Page: @url{http://www.dilos.org/}

@cindex DilOS 1.3.7, download
@unnumberedsubsec Download

NOTE:
This version of @emph{pretest} DilOS virtual machine is based on a pre-release
version 1.3.7.18.

Official Downloads: @url{http://www.dilos.org/download}.

Pre-release downloads: @url{http://apt2.dilos.org/dilos/isos/}

ISO @url{http://apt2.dilos.org/dilos/isos/dilos-core_install-14-09-19_17-23-1.3.7.18.iso}

@cindex DilOS 1.3.7, QEMU/KVM notes
@unnumberedsubsec QEMU/KVM notes

DilOS installer requires 1024MB of RAM.

DilOS requires using QEMU's @option{-machine pc-1.1} (without it, booting hangs
forever).

DilOS seems to require a VGA adapter (using @option{-nographic -nodefaults}
prevents successful booting).

See the installation script (@file{build_scripts/build_dilso137.sh}) for
download and QMEU/KVM commands.

@cindex DilOS 1.3.7, CD Installation
@unnumberedsubsec CD Installation/Setup

During setup, use the default option for most choices.

@itemize
@item Select disks to be automatically partitioned: @var{c2t0d0}
@item (Wait for package installation)
@item Root password: @var{12345}
@item Username (for non-root user): @var{miles}
@item Password for miles: @var{12345}
@item Host name: @var{dilos137}
@item Domain name: empty
@item Configure Network interface @code{vioif0}: @var{yes}
@item Enable DHCP for @code{vioif0}: @var{yes}
@item Enable IPv4 for @code{vioif0}: @var{no}
@end itemize

Once installation completes, press @var{OK} to reboot with the
newly installed system.

@cindex DilOS 1.3.7, First Boot
@unnumberedsubsec First Boot ('clean-install')

Login with @var{root} (password: @var{12345}).

Enable serial port console
(see @url{http://wiki.openindiana.org/oi/4.6+Remote+Console}):
@example
# comment "background", uncomment "terminal"+"serial"
# add ",console=ttya" to "kernel$" line
gsed -i -e '/^background /s/^/# /' \
    -e '/^# *serial /s/^# *//' \
    -e '/^# *terminal /s/^# *//' \
    -e '/kernel\$ /s/$/,console=ttya/' \
   /rpool/boot/grub/menu.lst
@end example

Reduce GRUB timeout:
@example
gsed -i -e '/^timeout [0-9]*$/s/ [0-9]*$/ 1/' /rpool/boot/grub/menu.lst
@end example

Ugly Hack: Disable 'sun-color' terminal on the default profile
@example
gsed -i 's/TERM=sun.*$/TERM=xterm/' /etc/profile
@end example

User @var{miles} is explicitly listed in the @file{sudoers} file, add @code{NOPASSWD:}:
@example
sed -i -e '/^miles/s/ALL$/NOPASSWD: ALL/' /etc/sudoers
@end example

Use only Free repositories:
@example
echo "deb http://apt.dilos.org/dilos dilos-unstable main
deb http://apt.dilos.org/dilos dilos-testing main" > /etc/apt/sources.list
@end example


Stop the VM with @command{/sbin/halt},
tag the QCOW2 file @file{dilos137.qcow2} as 'clean-install'.
A pre-build image is available for download, see @xref{Downloads}.

@cindex DilOS 1.3.7, Setup build tools
@unnumberedsubsec Setup build tools ('build-ready')

Start @file{dilos137.qcow2} with the @command{pretest-run.sh} script.

Once booted, login with @var{root} (password: @var{12345}).

Install development packages:
@example
apt-get -y update
apt-get -y upgrade
apt-get -y install developer-build-gnu-make developer-versioning-mercurial \
                   git gcc-48 text-gnu-grep developer-gnu-binutils \
                   developer-build-autoconf developer-build-automake \
                   developer-build-pkg-config rsync \
                   system-library-math-dev system-library-platform-dev \
                   developer-gperf
# Special handling for gnu-gettext: if the first installation fails,
# Fix it with '-f'
apt-get -y install text-gnu-gettext
apt-get -f install
@end example

Run @command{/sbin/halt} to stop the machine,
press @kbd{CTRL-A,c} to switch to QEMU's monitor,
run @command{commit all} to save changes, then @command{quit}
to terminate QEMU.

Save the disk image as 'build-ready'.
A pre-build image is available for download, see @xref{Downloads}.

@c ***********************************************************
@c Downloads
@c ***********************************************************
@node Downloads, Future Improvements, Build Recipes , Top
@chapter Downloads
@cindex Downloads
@cindex Pre-build VMs

@menu
* Clean-Install VM downloads::        List of available VMs
* Build-Ready VM downloads::          List of available VMs
@end menu

@node Clean-Install VM downloads, Build-Ready VM downloads, Downloads, Downloads
@cindex Clean-Install Images downloads
@cindex downloads, clean-install images
@section Clean-Install VM downloads

Available pre-build virtual machines are congiured as described in
@ref{Clean-Install VMs} section:

@table @asis
@item OpenBSD 5.5
@url{http://files.housegordon.org/pretest/v0.1/openbsd55.clean-install.qcow2.xz}

@item NetBSD 6.1.4
@url{http://files.housegordon.org/pretest/v0.1/netbsd614.clean-install.qcow2.xz}

@item FreeBSD 10
@url{http://files.housegordon.org/pretest/v0.1/freebsd10.clearn-install.qcow2.xz}

@item FreeBSD 9.3
@url{http://files.housegordon.org/pretest/v0.1/freebsd93.clean-install.qcow2.xz}

@item MINIX R3.3.0
@url{http://files.housegordon.org/pretest/v0.1/minixR330.clean-install.qcow2.xz}

@item GNU Hurd/Debian
GNU Hurd/Debian does not have a 'clean-install' image.

@item Debian 7.6
@url{http://files.housegordon.org/pretest/v0.1/debian76.clean-install.qcow2.xz}

@item gNewSense 3.1
@url{http://files.housegordon.org/pretest/v0.1/gnewsense31.clean-install.qcow2.xz}

@item CentOS 7.0
@url{http://files.housegordon.org/pretest/v0.1/centos7.clean-install.qcow2.xz}

@item CentOS 6.5
@url{http://files.housegordon.org/pretest/v0.1/centos6.5.clean-install.qcow2.xz}

@item Ubuntu 14.04.1
@url{http://files.housegordon.org/pretest/v0.1/ubuntu14.clean-install.qcow2.xz}

@item Trisquel 6.0.1
@url{http://files.housegordon.org/pretest/v0.1/trisquel601.clean-install.qcow2.xz}

@item OpenSUSE 13.1
@url{http://files.housegordon.org/pretest/v0.1/opensuse131.clean-install.qcow2.xz}

@item DilOS 1.3.7
@url{http://files.housegordon.org/pretest/v0.1/dilos137.clean-install.qcow2.xz}

@end table




@node Build-Ready VM downloads, Future Improvements, Clean-Install VM downloads, Downloads
@cindex Build-Ready Images downloads
@cindex downloads, Build-ready images
@section Build-ready images

Available pre-build virtual machines are congiured as described in
@ref{Build-Ready VMs} section:
@table @asis

@item OpenBSD 5.5
@url{http://files.housegordon.org/pretest/v0.1/openbsd55.build-ready.qcow2.xz}

@item NetBSD 6.1.4
@url{http://files.housegordon.org/pretest/v0.1/netbsd614.build-ready.qcow2.xz}

@item GNU Hurd/Debian
@url{http://files.housegordon.org/pretest/v0.1/hurd.build-ready.qcow2.xz}

@item MINIX R3.3.0
@url{http://files.housegordon.org/pretest/v0.1/minixR330.build-ready-v1.qcow2.xz}

@item FreeBSD 10
@url{http://files.housegordon.org/pretest/v0.1/freebsd10.build-ready.qcow2.xz}

@item FreeBSD 9.3
@url{http://files.housegordon.org/pretest/v0.1/freebsd93.build-ready.qcow2.xz}

@item Debian 7.6
@url{http://files.housegordon.org/pretest/v0.1/debian76.build-ready.qcow2.xz}

@item Debian Compilers Pack
@url{http://files.housegordon.org/pretest/v0.1/debian76.compilers-pack.qcow2.xz}

@item gNewSense 3.1
@url{http://files.housegordon.org/pretest/v0.1/gnewsense31.build-ready.qcow2.xz}

@item CentOS 7.0
@url{http://files.housegordon.org/pretest/v0.1/centos7.build-ready.qcow2.xz}

@item CentOS 6.5
@url{http://files.housegordon.org/pretest/v0.1/centos6.5.build-ready.qcow2.xz}

@item Ubuntu 14.04.1
@url{http://files.housegordon.org/pretest/v0.1/ubuntu14.build-ready.qcow2.xz}

@item Trisquel 6.0.1
@url{http://files.housegordon.org/pretest/v0.1/trisquel601.build-ready.qcow2.xz}

@item OpenSUSE 13.1
@url{http://files.housegordon.org/pretest/v0.1/opensuse131.build-ready.qcow2.xz}

@item DilOS 1.3.7
@url{http://files.housegordon.org/pretest/v0.1/dilos137.build-ready.qcow2.xz}

@end table


@c ***********************************************************
@c Future Improvements
@c ***********************************************************
@node Future Improvements, Concept Index, Downloads, Top
@chapter Future Improvements
@cindex Future Improvements

The current @emph{PreTest} version is suitable for manual testing.
I hope one day to use it as a basis of automated pre-release testing system.

For specific items, see @file{TODO.md} file in the project's repository.

@node    Concept Index,    ,  Future Improvements, Top
@comment node-name,    next,  previous,      up
@unnumbered Concept Index

@printindex cp

@bye

